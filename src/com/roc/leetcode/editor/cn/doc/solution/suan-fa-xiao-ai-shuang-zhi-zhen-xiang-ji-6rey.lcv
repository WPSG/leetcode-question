> 大家好，我是小爱，一个热爱算法并不断努力的女孩子！[关注我](https://leetcode-cn.com/u/helen_class/)，和我一起交流算法心得呀！

![image.png](https://pic.leetcode-cn.com/1631589843-Jxxabt-image.png)

---

### 解法：双指针

首先，题目中说到的“该字符串可以通过删除 `s` 中的某些字符得到”，也即要求的字符串是 `s` 的子序列。由于我们要对字典里的多个字符串都进行子序列的判断，所以我们需要封装一个函数 `isSubsequence(string s, string t)`，判断字符串 `t` 是否为字符串 `s` 的子序列。

其次，题目要求返回长度最长，且字典序最小的字符串。为了提高搜索效率，我们可以提前将字典中的字符串按这两个条件排序好（也即第一优先级为长度降序，第二优先级为字典序升序）。这样，我们从前向后遍历字典时，只要找到一个满足条件的字符串，就可以直接将其返回。

---

### 算法细节：

首先我们实现判断子序列的函数，本问题可以直接利用 [392. 判断子序列](https://leetcode-cn.com/problems/is-subsequence/) 中的函数。在本题解的代码中，我们利用双指针自己实现了该函数，其基本思路如下：

1. 我们利用变量 $i$ 记录当前寻找到了 `s` 中的哪个字符，初始值设为 $0$。
2. 由于我们要从 `s` 中匹配好全部 `t` 的字符，所以我们依次遍历 `t` 中的字符 `ch`，每次从当前的 $s[i]$ 开始依次向右寻找某个等于 `ch` 的字符，若遍历完了 `s` 仍未找到，说明 `t` 不是 `s` 的子序列，直接返回 `false`
3. 若找到了相等的位置 $i$，下一次匹配时应该从 $i + 1$ 位置开始匹配，所以我们令 $i$ 加一，并进入下一轮循环即可。

其次，我们对字典进行优先级排序。在 `sort` 函数的第三项中定义比较函数，第一优先级为长度，更长的排在前面；若长度相同，我们按照第二优先级字典序，更小的排在前面排序。

以上过程在以下代码中都有对应注释，若有不明白的地方，欢迎大家在评论区与小爱互动呀！

---

### 代码：

> 感谢 [V12的奥托](https://leetcode-cn.com/u/v12de-ao-tuo/) 小伙伴提供 Python3 版本，感谢 [𝓧𝓨𝓕𝓢 🍁](https://leetcode-cn.com/u/detachmliu/) 小伙伴提供 Java 版本！

* []

```C++
class Solution {
public:
    bool isSubsequence(string s, string t) {
        // 判断 t 是否是 s 的子序列

        int n = s.size(), m = t.size();
        
        // 如果 t 长度大于 s，一定不是子序列
        if(m > n) return false;

        // 记录当前 s 中匹配到了哪个位置
        int i = 0;
        for(char ch : t) {
            while(i < n && s[i] != ch) i++;
            if(i >= n) return false;

            // 此时 s[i] = ch，下次要从 s[i + 1] 开始匹配
            i++;
        }

        return true;
    }

    string findLongestWord(string s, vector<string>& dictionary) {
        // 更长的、字典序更小的排在前面，这样一旦找到，就是结果
        sort(dictionary.begin(), dictionary.end(), [&](string &a, string &b) {
            if(a.size() == b.size()) return a < b;
            return a.size() > b.size();
        });

        for(string &t : dictionary) {
            if(isSubsequence(s, t)) return t;
        }

        // 如果没找到
        return "";
    }
};
```

* []

```Java
class Solution {
    private boolean isSubsequence(char[] s, char[] t) {
        // 判断 t 是否为 s 的子序列

        int n = s.length, m = t.length;

        // 如果 t 长度大于 s，一定不是子序列
        if(m > n) return false;

        // 记录当前 s 中匹配到了哪个位置
        int i = 0;

        for(char ch : t) {
            while(i < n && s[i] != ch) i++;
            if(i >= n) return false;

            // 此时 s[i] = ch，下次要从 s[i + 1] 开始匹配
            i++;
        }

        return true;
    }

    public String findLongestWord(String s, List<String> dictionary) {
        var arr = s.toCharArray();

        // 第一优先级长度，越长的越靠前；第二优先级字典序，越小的越靠前
        dictionary.sort((a, b) -> {
            if (a.length() != b.length()) {
                return Integer.compare(b.length(), a.length());
            }
            return a.compareTo(b);
        });

        for (var str : dictionary) {
            if (isSubsequence(arr, str.toCharArray())) {
                return str;
            }
        }

        // 未找到，返回空字符串
        return "";
    }
}
```

* []

```Python
class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        n = len(s)
        m = len(t)
        if m > n:
            return False

        i = 0
        for ch in t:
            while i < n and s[i] != ch:
                i += 1
            if i >= n:
                return False

            # 此时 s[i] = ch，下次要从 s[i + 1] 开始匹配
            i += 1
        return True

    def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        # lambda 排序：长度越大的排在前面，字典序越小的排在前面
        dictionary.sort(key = lambda x: (-len(x), x))

        for word in dictionary:
            if self.isSubsequence(s, word):
                return word
            
        return ''
```

---

### 复杂度分析：

- 时间复杂度：$O(max(mlgm, nm))$，其中 $n$ 为字符串 `s` 的长度，$m$ 为字典长度。对字典排序复杂度 $O(mlgm)$，一次子序列判断，最多遍历一遍 `s`，复杂度为 $O(n)$，共有 $m$ 个字符串进行判断，所以复杂度为 $O(mn)$。
- 空间复杂度：$O(1)$

